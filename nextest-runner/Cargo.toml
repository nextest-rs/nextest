[package]
name = "nextest-runner"
description = "Core runner logic for cargo nextest."
version = "0.68.0"
readme = "README.md"
license = "MIT OR Apache-2.0"
repository = "https://github.com/nextest-rs/nextest"
documentation = "https://docs.rs/nextest-runner"
edition = "2021"
rust-version.workspace = true
keywords = ["nextest", "test-runner"]
categories = ["development-tools::testing"]
# For an example build script that gates by compiler version, see the history for build.rs in this
# directory.

[dependencies]
aho-corasick.workspace = true
async-scoped.workspace = true
atomicwrites.workspace = true
bstr.workspace = true
bytes.workspace = true
camino = { workspace = true, features = ["serde1"] }
camino-tempfile.workspace = true
cargo_metadata.workspace = true
config.workspace = true
cfg-if.workspace = true
chrono.workspace = true
debug-ignore.workspace = true
display-error-chain.workspace = true
duct.workspace = true
future-queue.workspace = true
futures.workspace = true
guppy.workspace = true
# Used to find the cargo root directory, which is needed in case the user has
# added a config.toml there
home.workspace = true
humantime-serde.workspace = true
indenter.workspace = true
indexmap = { workspace = true, features = ["serde"] }
indicatif.workspace = true
is_ci.workspace = true
itertools.workspace = true
miette.workspace = true
newtype-uuid.workspace = true
nextest-filtering.workspace = true
nextest-metadata.workspace = true
nextest-workspace-hack.workspace = true
once_cell.workspace = true
owo-colors.workspace = true
pin-project-lite.workspace = true
quick-junit.workspace = true
rand.workspace = true
regex.workspace = true
semver.workspace = true
serde.workspace = true
serde_ignored.workspace = true
serde_json.workspace = true
serde_path_to_error.workspace = true
shell-words.workspace = true
smallvec.workspace = true
smol_str = { workspace = true, features = ["serde"] }
strip-ansi-escapes.workspace = true
swrite.workspace = true
tar.workspace = true
# For cfg expression evaluation for [target.'cfg()'] expressions
target-spec.workspace = true
target-spec-miette.workspace = true
thiserror.workspace = true
# For parsing of .cargo/config.toml files
tokio = { workspace = true, features = [
    "fs",
    "io-util",
    "macros",
    "process",
    "rt",
    "rt-multi-thread",
    "signal",
    "sync",
    "time",
] }
tokio-stream = { workspace = true, features = ["signal"] }
toml.workspace = true
toml_edit = { workspace = true, features = ["serde"] }
tracing.workspace = true
unicode-ident.workspace = true
unicode-normalization.workspace = true
xxhash-rust = { workspace = true, features = ["xxh64"] }
zstd.workspace = true

###
### Update-related features, optionally enabled
###
hex = { workspace = true, optional = true }
http = { workspace = true, optional = true }
mukti-metadata = { workspace = true, optional = true }
sha2 = { workspace = true, optional = true }
# TODO: remove dependency on self_update, build our own thing on top of mukti
self_update = { workspace = true, optional = true }

###
### tokio-console support, not enabled by default
###
console-subscriber = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true }

[target.'cfg(unix)'.dependencies]
libc.workspace = true
nix.workspace = true

[target.'cfg(windows)'.dependencies]
dunce.workspace = true
windows-sys = { workspace = true, features = [
    "Win32_Foundation",
    "Win32_Globalization",
    "Win32_Security",
    "Win32_Storage_FileSystem",
    "Win32_System_Console",
    "Win32_System_JobObjects",
    "Win32_System_Pipes",
] }
win32job.workspace = true

# Use rustls by default, OpenSSL on platforms where rustls isn't available:
# RISC-V: https://github.com/nextest-rs/nextest/issues/820
# (default features for self_update turns on openssl)
[target.'cfg(not(any(target_arch = "riscv32", target_arch = "riscv64")))'.dependencies]
self_update = { workspace = true, optional = true, default-features = false, features = [
    "rustls",
] }

[target.'cfg(any(target_arch = "riscv32", target_arch = "riscv64"))'.dependencies]
self_update = { workspace = true, optional = true, default-features = true }


[dev-dependencies]
color-eyre.workspace = true
fixture-data.workspace = true
indoc.workspace = true
insta.workspace = true
maplit.workspace = true
pathdiff.workspace = true
pretty_assertions.workspace = true
proptest.workspace = true
test-strategy.workspace = true
test-case.workspace = true

[[bin]]
name = "passthrough"
path = "test-helpers/passthrough.rs"

[features]
self-update = ["dep:hex", "dep:self_update", "dep:http", "dep:mukti-metadata", "dep:sha2"]
experimental-tokio-console = ["dep:console-subscriber", "dep:tracing-subscriber", "tokio/tracing"]
