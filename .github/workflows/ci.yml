on:
  push:
    branches: [main, auto, canary]
  pull_request:
    branches:
      - main

name: CI
env:
  RUSTFLAGS: -D warnings
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2
      - name: Lint (clippy)
        run: cargo clippy --all-features --all-targets
      - name: Lint (rustfmt)
        run: cargo xfmt --check
      - name: Install cargo readme
        uses: taiki-e/install-action@9c2797b8f281b478a30f4d5f6720c33372b31e78 # v2
        with:
          tool: cargo-readme
      - name: Run cargo readme
        run: ./scripts/regenerate-readmes.sh
      - name: Check for differences
        run: git diff --exit-code

  build-rustdoc:
    name: Build documentation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2
      - name: Build rustdoc
        run: cargo doc --all-features --workspace

  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # macos-14 for M1 runners
          - macos-14
          - windows-latest
        # 1.74 is the MSRV
        rust-version: ["1.74", stable]
      fail-fast: false
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2
        with:
          # Matrix instances (other than OS) need to be added to this explicitly
          key: ${{ matrix.rust-version }}
      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Build nextest-metadata
        run: cargo build --package nextest-metadata
      - name: Build cargo-nextest without self-update
        run: cargo build --package cargo-nextest --no-default-features --features default-no-update
      - name: Build cargo-nextest
        run: cargo build --package cargo-nextest
      - name: Build all targets
        run: cargo build --all-targets
      - name: Build all targets with all features
        run: cargo build --all-targets --all-features
      - name: Doctests
        run: cargo test --doc
      - name: Test with locally built nextest
        run: cargo local-nt run --profile ci
      - name: Test with latest nextest release
        run: cargo nextest run --profile ci
      - name: Test without double-spawning
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-14' }}
        env:
          NEXTEST_DOUBLE_SPAWN: 0
        run: cargo local-nt run --profile ci

      - name: Test without rustup wrappers
        env:
          CARGO_NEXTEST: target/debug/cargo-nextest
          RUSTUP_AVAILABLE: 1
        shell: bash
        run: ./scripts/nextest-without-rustup.sh run --profile ci

      - name: Upload nextest binary
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: cargo-nextest-${{ matrix.os }}-${{ matrix.rust-version }}
          path: |
            target/debug/cargo-nextest
            target/debug/cargo-nextest.exe
          if-no-files-found: error

  test-archive-target-runner:
    name: Test archives with a target runner
    # gcc-mingw-w64-x86-64-win32 requires Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-gnu
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2

      # The version of wine that comes with Ubuntu 22.04 is too old: it doesn't contain
      # bcryptprimitives.dll, which is required to run binaries built with Rust 1.78+. We use the
      # WineHQ PPA to get a newer version.
      - name: Add Wine PPA
        run: |
          sudo dpkg --add-architecture i386
          wget -nc https://dl.winehq.org/wine-builds/winehq.key
          sudo apt-key add winehq.key
          sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ jammy main'
      - name: Install wine and gcc-mingw-w64-x86-64-win32
        run: |
          sudo apt-get update
          sudo apt-get install winehq-stable gcc-mingw-w64-x86-64-win32
      - name: Build cargo-nextest
        run: cargo build --package cargo-nextest
      - name: Archive test fixtures
        env:
          CARGO_NEXTEST: target/debug/cargo-nextest
          RUSTUP_AVAILABLE: 1
        run: |
          ./scripts/nextest-without-rustup.sh archive --manifest-path fixtures/nextest-tests/Cargo.toml \
            --target x86_64-pc-windows-gnu --archive-file target/fixture-archive.tar.zst \
            --package cdylib-example --package nextest-derive

      # This ensures that for target binaries, we always use the libdir in the archive, never the
      # one installed by rustup.
      - name: Remove x86_64-pc-windows-gnu target from rustup
        run: rustup target remove x86_64-pc-windows-gnu

      - name: Run test fixtures
        env:
          CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER: wine
        run: cargo local-nt run --archive-file target/fixture-archive.tar.zst

      # Completely uninstall rustup -- this is similar to running an archive on a machine without
      # cargo.
      - name: Uninstall rustup
        run: rustup self uninstall -y

      - name: Run test fixtures without rustup wrappers
        env:
          CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER: wine
          CARGO_NEXTEST: target/debug/cargo-nextest
        run: ./scripts/nextest-without-rustup.sh run --archive-file target/fixture-archive.tar.zst

      # Upload the archive for use in the next job.
      - name: Upload archive
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: fixture-archive
          path: target/fixture-archive.tar.zst
          if-no-files-found: error

  test-archive-runner-dest:
    name: Test archives with a runner (destination)
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    needs:
      - test-archive-target-runner
      - build
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - name: Download nextest binary
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: cargo-nextest-${{ matrix.os }}-stable
          path: nextest-bin
      - name: Download archive
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: fixture-archive
          path: fixture-archive
      - name: Run test fixtures (host)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          CARGO_NEXTEST: nextest-bin/cargo-nextest
        run: |
          chmod +x $CARGO_NEXTEST
          ./scripts/nextest-without-rustup.sh run \
            --archive-file fixture-archive/fixture-archive.tar.zst \
            --workspace-remap $GITHUB_WORKSPACE/fixtures/nextest-tests \
            -E 'platform(host)'
      - name: Run test fixtures (target)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        env:
          CARGO_NEXTEST: nextest-bin/cargo-nextest.exe
        run: |
          ./scripts/nextest-without-rustup.sh run \
            --archive-file fixture-archive/fixture-archive.tar.zst \
            --workspace-remap $GITHUB_WORKSPACE/fixtures/nextest-tests \
            -E 'platform(target)'
